{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0406\\u0422-\\u041D\\u0410\\u0412\\u0427\\u0410\\u041D\\u041D\\u042F\\\\GitHub\\\\goit-react-hw-04-phonebook\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactList from './ContactList';\nimport css from './App.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  const [contacts, setContacts] = useState([{\n    id: 'id-1',\n    name: 'Rosie Simpson',\n    number: '459-12-56'\n  }, {\n    id: 'id-2',\n    name: 'Hermione Kline',\n    number: '443-89-12'\n  }, {\n    id: 'id-3',\n    name: 'Eden Clements',\n    number: '645-17-79'\n  }, {\n    id: 'id-4',\n    name: 'Annie Copeland',\n    number: '227-91-26'\n  }]);\n  const [filter, setFilter] = useState('');\n\n  const deleteContact = contactId => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== contactId));\n  };\n\n  const createUser = data => {\n    if (contacts.find(contact => contact.name === data.name)) {\n      return Notify.info('This name already exists in the list');\n    }\n\n    setContacts(prevContacts => [...prevContacts, { ...data,\n      id: nanoid()\n    }]);\n  };\n\n  const cangeFilter = e => {\n    setFilter(e.target.value);\n  }; //  const cangeFilter = ({ target: { value } }) => {\n  //    setFilter(value);\n  //  };\n\n\n  const getVisibleContacts = () => {\n    const normalizeFilterContact = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizeFilterContact));\n  };\n\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    console.log('parsedContacts :>> ', parsedContacts);\n\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: css.phonebook,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: css['phonebook-title'],\n        children: \"Phonebook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        createUser: createUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        filter: filter,\n        cangeFilter: cangeFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n        contacts: getVisibleContacts(),\n        onDeleteContact: deleteContact\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}; //=====================================================================\n// import { Component } from 'react';\n// import { nanoid } from 'nanoid';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import ContactForm from './ContactForm';\n// import Filter from './Filter';\n// import ContactList from './ContactList';\n// import css from './App.module.css';\n// export class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n//   createUser = data => {\n//     this.setState(prevState => {\n//       if (prevState.contacts.find(contact => contact.name === data.name)) {\n//         return Notify.info('This name already exists in the list');\n//       }\n//       return { contacts: [...prevState.contacts, { ...data, id: nanoid() }] };\n//     });\n//   };\n//   cangeFilter = e => {\n//     this.setState({ filter: e.target.value });\n//   };\n//   getVisibleContacts = () => {\n//     const normalizeFilterContact = this.state.filter.toLowerCase();\n//     return this.state.contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizeFilterContact)\n//     );\n//   };\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n//     console.log('parsedContacts :>> ', parsedContacts);\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   render() {\n//     const { filter } = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n//     return (\n//       <>\n//         <div className={css.phonebook}>\n//           <h1 className={css['phonebook-title']}>Phonebook</h1>\n//           <ContactForm createUser={this.createUser} />\n//           <h2>Contacts</h2>\n//           <Filter filter={filter} cangeFilter={this.cangeFilter} />\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         </div>\n//       </>\n//     );\n//   }\n// }\n\n_s(App, \"91AXoYJu/ynMdH3Mt7XExANeWHk=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/ІТ-НАВЧАННЯ/GitHub/goit-react-hw-04-phonebook/src/components/App.jsx"],"names":["useState","useEffect","nanoid","Notify","ContactForm","Filter","ContactList","css","App","contacts","setContacts","id","name","number","filter","setFilter","deleteContact","contactId","prevContacts","contact","createUser","data","find","info","cangeFilter","e","target","value","getVisibleContacts","normalizeFilterContact","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","console","log","setItem","stringify","phonebook"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport Filter from './Filter';\r\nimport ContactList from './ContactList';\r\n\r\nimport css from './App.module.css';\r\n\r\nexport const App = () => {\r\n  const [contacts, setContacts] = useState([\r\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  ]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const deleteContact = contactId => {\r\n    setContacts(prevContacts =>\r\n      prevContacts.filter(contact => contact.id !== contactId)\r\n    );\r\n  };\r\n\r\n  const createUser = data => {\r\n    if (contacts.find(contact => contact.name === data.name)) {\r\n      return Notify.info('This name already exists in the list');\r\n    }\r\n    setContacts(prevContacts => [...prevContacts, { ...data, id: nanoid() }]);\r\n  };\r\n\r\n  const cangeFilter = e => {\r\n    setFilter(e.target.value);\r\n  };\r\n  //  const cangeFilter = ({ target: { value } }) => {\r\n  //    setFilter(value);\r\n  //  };\r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizeFilterContact = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizeFilterContact)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const contacts = localStorage.getItem('contacts');\r\n    const parsedContacts = JSON.parse(contacts);\r\n    console.log('parsedContacts :>> ', parsedContacts);\r\n\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  return (\r\n    <>\r\n      <div className={css.phonebook}>\r\n        <h1 className={css['phonebook-title']}>Phonebook</h1>\r\n\r\n        <ContactForm createUser={createUser} />\r\n\r\n        <h2>Contacts</h2>\r\n\r\n        <Filter filter={filter} cangeFilter={cangeFilter} />\r\n\r\n        <ContactList\r\n          contacts={getVisibleContacts()}\r\n          onDeleteContact={deleteContact}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n//=====================================================================\r\n\r\n// import { Component } from 'react';\r\n// import { nanoid } from 'nanoid';\r\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\r\n\r\n// import ContactForm from './ContactForm';\r\n// import Filter from './Filter';\r\n// import ContactList from './ContactList';\r\n\r\n// import css from './App.module.css';\r\n\r\n// export class App extends Component {\r\n//   state = {\r\n//     contacts: [\r\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n//     filter: '',\r\n//   };\r\n\r\n//   deleteContact = contactId => {\r\n//     this.setState(prevState => ({\r\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n//     }));\r\n//   };\r\n\r\n//   createUser = data => {\r\n//     this.setState(prevState => {\r\n//       if (prevState.contacts.find(contact => contact.name === data.name)) {\r\n//         return Notify.info('This name already exists in the list');\r\n//       }\r\n//       return { contacts: [...prevState.contacts, { ...data, id: nanoid() }] };\r\n//     });\r\n//   };\r\n\r\n//   cangeFilter = e => {\r\n//     this.setState({ filter: e.target.value });\r\n//   };\r\n\r\n//   getVisibleContacts = () => {\r\n//     const normalizeFilterContact = this.state.filter.toLowerCase();\r\n\r\n//     return this.state.contacts.filter(contact =>\r\n//       contact.name.toLowerCase().includes(normalizeFilterContact)\r\n//     );\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem('contacts');\r\n//     const parsedContacts = JSON.parse(contacts);\r\n//     console.log('parsedContacts :>> ', parsedContacts);\r\n\r\n//     if (parsedContacts) {\r\n//       this.setState({ contacts: parsedContacts });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { filter } = this.state;\r\n\r\n//     const visibleContacts = this.getVisibleContacts();\r\n\r\n//     return (\r\n//       <>\r\n//         <div className={css.phonebook}>\r\n//           <h1 className={css['phonebook-title']}>Phonebook</h1>\r\n\r\n//           <ContactForm createUser={this.createUser} />\r\n\r\n//           <h2>Contacts</h2>\r\n\r\n//           <Filter filter={filter} cangeFilter={this.cangeFilter} />\r\n\r\n//           <ContactList\r\n//             contacts={visibleContacts}\r\n//             onDeleteContact={this.deleteContact}\r\n//           />\r\n//         </div>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}